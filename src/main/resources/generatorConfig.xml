<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
	<!-- 引入配置文件 -->
	<properties resource="application.properties" />
	<classPathEntry location="G:\Maven_Work\mysql\mysql-connector-java\5.1.30\mysql-connector-java-5.1.30.jar" />


	<context id="Mysql" targetRuntime="MyBatis3">
		<!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
     -->
		<property name="autoDelimitKeywords" value="false"/>
		<!-- 生成的Java文件的编码 -->
		<property name="javaFileEncoding" value="UTF-8"/>
		<!-- 格式化java代码 -->
		<property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
		<!-- 格式化XML代码 -->
		<property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

		<!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
		<property name="beginningDelimiter" value="`" />
		<property name="endingDelimiter" value="`" />
		<!-- 生成的文件编码 -->
		<property name="javaFileEncoding" value="utf-8"/>
		<!-- 通过自定义插件类生成自定义注解和接口 -->
		<plugin type="com.example.myangular.util.mybatis.generator.GenPlugin">
			<property name="mappers" value="com.example.myangular.util.mybatis.mapper.BaseMapper" />
		</plugin>
		<commentGenerator>
			<property name="suppressDate" value="true"/>
			<!-- 生成注释 -->
			<property name="suppressAllComments" value="true"/>
		</commentGenerator>
		<!-- 数据库连接属性 -->
		<jdbcConnection driverClass="${spring.datasource.driverClassName}"
						connectionURL="${spring.datasource.url}"
						userId="${spring.datasource.username}"
						password="${spring.datasource.password}" />
		<!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
		<javaTypeResolver >
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>
		<!-- 生成实体类配置 -->
		<javaModelGenerator targetPackage="com.example.myangular.domain" targetProject="src/main/java">
			<!-- 是否对model添加 构造函数 -->
			<property name="constructorBased" value="true"/>

			<!-- 是否允许子包，即targetPackage.schemaName.tableName -->
			<property name="enableSubPackages" value="false"/>

			<!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
			<property name="immutable" value="true"/>

			<!-- 给Model添加一个父类 -->
			<!--property name="rootClass" value="com.example.myangular.base.BaseClass"/-->

			<!-- 是否对类CHAR类型的列的数据进行trim操作 -->
			<property name="trimStrings" value="true"/>
		</javaModelGenerator>
		<!-- 生成映射文件配置 -->
		<sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
			<property name="enableSubPackages" value="false"/>
		</sqlMapGenerator>
		<!-- 生成映射接口配置 -->
		<javaClientGenerator targetPackage="com.example.myangular.mapper" targetProject="src/main/java" type="XMLMAPPER" />
		
		<table tableName="%">
			<!--mysql 配置 -->
			<!--generatedKey column="id" sqlStatement="Mysql" identity="true" /-->
		</table>
	</context>
</generatorConfiguration>